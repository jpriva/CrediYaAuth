{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
		"name": "Crediya Auth API",
		"description": "Collection for testing the User creation endpoint.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Create User - Success (201 Created)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response body is a valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response contains user ID and email\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.userId).to.be.a('number');",
									"    pm.expect(jsonData.email).to.include('@');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"John\",\n    \"lastName\": \"Doe\",\n    \"email\": \"john.doe.{{$timestamp}}@example.com\",\n    \"idNumber\": \"123456789\",\n    \"rolId\": 1,\n    \"baseSalary\": 5000000,\n    \"phone\": \"3001234567\",\n    \"address\": \"123 Main St\",\n    \"birthDate\": \"1990-01-15\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User - Email Already Taken (409 Conflict)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// This pre-request script ensures the user exists before testing the conflict case.",
									"const userToCreate = {",
									"    \"name\": \"Jane\",",
									"    \"lastName\": \"Doe\",",
									"    \"email\": \"jane.doe.conflict@example.com\",",
									"    \"idNumber\": \"987654321\",",
									"    \"rolId\": 1,",
									"    \"baseSalary\": 6000000",
									"};",
									"",
									"const createRequest = {",
									"    url: pm.environment.get('baseUrl') + '/api/v1/usuarios',",
									"    method: 'POST',",
									"    header: 'Content-Type:application/json',",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(userToCreate)",
									"    }",
									"};",
									"",
									"pm.sendRequest(createRequest, function (err, res) {",
									"    console.log('Pre-request to create user for conflict test sent.');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409 Conflict\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"pm.test(\"Response body contains correct error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.equal('ER-02');",
									"    pm.expect(jsonData.message).to.equal('Email is already in use');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Jane\",\n    \"lastName\": \"Doe\",\n    \"email\": \"jane.doe.conflict@example.com\",\n    \"idNumber\": \"987654321\",\n    \"rolId\": 1,\n    \"baseSalary\": 6000000\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User - Blank Field (400 Bad Request)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response body contains correct error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.equal('ER-01');",
									"    pm.expect(jsonData.message).to.equal('User fields are invalid');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"\",\n    \"lastName\": \"Smith\",\n    \"email\": \"test.smith@example.com\",\n    \"idNumber\": \"111222333\",\n    \"rolId\": 1,\n    \"baseSalary\": 4000000\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User - Invalid Size (400 Bad Request)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response body contains correct error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.equal('ER-03');",
									"    pm.expect(jsonData.message).to.equal('The length of one or more fields is invalid');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"ThisNameIsWayTooLongToBeConsideredValidByTheSystemValidationRules\",\n    \"lastName\": \"Jones\",\n    \"email\": \"long.name@example.com\",\n    \"idNumber\": \"444555666\",\n    \"rolId\": 1,\n    \"baseSalary\": 7000000\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User - Role Not Found (400 Bad Request)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response body contains correct error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.equal('ER-06');",
									"    pm.expect(jsonData.message).to.equal('Role not found');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"NoRole\",\n    \"lastName\": \"User\",\n    \"email\": \"no.role@example.com\",\n    \"idNumber\": \"777888999\",\n    \"rolId\": 999,\n    \"baseSalary\": 8000000\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User - Malformed Request (400 Bad Request)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response body contains a generic format error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include('Failed to read request');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Bad\",\n    \"lastName\": \"Format\",\n    \"email\": \"bad.format@example.com\",\n    \"baseSalary\": \"this-is-not-a-number\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"usuarios"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8081",
			"type": "string"
		}
	]
}